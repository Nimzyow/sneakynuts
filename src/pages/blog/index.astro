---
import "../../styles/globals.css";
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

// Define the blog collection
const blogCollection = await getCollection('blog');

// Get all unique tags and authors
const allTags = [...new Set(blogCollection.flatMap((post: CollectionEntry<'blog'>) => post.data.tags || []))] as string[];
const allAuthors = [...new Set(blogCollection.map((post: CollectionEntry<'blog'>) => post.data.author))] as string[];

// Sort posts by published date (newest first)
const sortedPosts = blogCollection.sort((a: CollectionEntry<'blog'>, b: CollectionEntry<'blog'>) => 
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);
---

<div class="min-h-screen bg-[var(--color-primary)]">
  <!-- Navigation -->
  <nav class="fixed top-0 w-full z-50 bg-black/20 backdrop-blur-md border-b border-white/10">
    <div class="max-w-7xl mx-auto px-6 py-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-2">
          <div class="w-10 h-10 bg-gradient-to-r from-[var(--color-accent)] to-[var(--color-highlight)] rounded-lg flex items-center justify-center">
            <span class="text-2xl">üéÆ</span>
          </div>
          <a href="/" class="text-2xl font-bold text-white hover:text-[var(--color-accent)] transition-colors">Sneaky Nuts</a>
        </div>
        <div class="hidden md:flex items-center space-x-8">
          <a href="/" class="text-white hover:text-[var(--color-accent)] transition-colors">Home</a>
          <a href="/#games" class="text-white hover:text-[var(--color-accent)] transition-colors">Games</a>
          <a href="/#about" class="text-white hover:text-[var(--color-accent)] transition-colors">About</a>
          <a href="/#careers" class="text-white hover:text-[var(--color-accent)] transition-colors">Careers</a>
          <a href="/#contact" class="text-white hover:text-[var(--color-accent)] transition-colors">Contact</a>
          <a href="/blog" class="text-[var(--color-accent)] font-bold">Blog</a>
        </div>
        <button class="bg-[var(--color-accent)] text-[var(--color-text-dark)] px-6 py-2 rounded-full font-bold hover:bg-[var(--color-highlight)] transition-all transform hover:scale-105">
          Join Us
        </button>
      </div>
    </div>
  </nav>

  <!-- Blog Header -->
  <section class="pt-32 pb-16">
    <div class="max-w-7xl mx-auto px-6">
      <div class="text-center mb-16">
        <h1 class="text-6xl md:text-8xl font-black mb-8 bg-gradient-to-r from-[var(--color-accent)] via-[var(--color-highlight)] to-[var(--color-purple)] bg-clip-text text-transparent">
          Blog
        </h1>
        <p class="text-xl md:text-2xl text-[var(--color-text-secondary)] max-w-3xl mx-auto">
          Insights, updates, and stories from the Sneaky Nuts team
        </p>
      </div>

      <!-- Main Content Layout -->
      <div class="flex flex-col lg:flex-row gap-8">
        <!-- Blog Posts - Left Side -->
        <div class="flex-1">
          <div id="blogPosts" class="space-y-8">
            {sortedPosts.map((post: CollectionEntry<'blog'>) => (
              <a href={`/blog/${post.slug}`} class="block group">
                <article class="bg-gradient-to-br from-[var(--color-secondary)] to-[var(--color-primary)] rounded-2xl p-8 hover:scale-[1.02] transition-all duration-500 cursor-pointer" 
                         data-author={post.data.author} 
                         data-tags={post.data.tags?.join(',') || ''}>
                  <div class="flex gap-6">
                    <!-- Post Emoji/Icon -->
                    <div class="flex-shrink-0">
                      <div class="text-5xl emoji" title={`Emoji: ${post.data.emoji || 'üìù'}`}>
                        {post.data.emoji || 'üìù'}
                      </div>
                    </div>
                    
                    <!-- Post Content -->
                    <div class="flex-1">
                      <h2 class="text-3xl font-bold mb-4 text-white group-hover:text-[var(--color-accent)] transition-colors">
                        {post.data.title}
                      </h2>
                      <p class="text-[var(--color-text-secondary)] mb-6 text-lg leading-relaxed">
                        {post.data.description}
                      </p>
                      
                      <div class="flex flex-wrap gap-2 mb-6">
                        {post.data.tags?.map((tag: string) => (
                          <span class="px-3 py-1 bg-[var(--color-accent)]/20 text-[var(--color-accent)] rounded-full text-sm">
                            {tag}
                          </span>
                        ))}
                      </div>

                      <div class="flex items-center justify-between text-sm text-[var(--color-text-secondary)] mb-6">
                        <span>By <strong class="text-white">{post.data.author}</strong></span>
                        <time datetime={post.data.pubDate.toISOString()}>
                          {post.data.pubDate.toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric' 
                          })}
                        </time>
                      </div>

                      <div class="inline-flex items-center text-[var(--color-accent)] font-bold group-hover:text-[var(--color-highlight)] transition-colors text-lg">
                        Read More ‚Üí
                      </div>
                    </div>
                  </div>
                </article>
              </a>
            ))}
          </div>
        </div>

        <!-- Filters Panel - Right Side -->
        <div class="lg:w-80 flex-shrink-0">
          <div class="bg-gradient-to-br from-[var(--color-secondary)] to-[var(--color-primary)] rounded-2xl p-6 sticky top-32">
            <h3 class="text-2xl font-bold text-white mb-6">Filters</h3>
            
            <!-- Author Filter -->
            <div class="mb-6">
              <label class="block text-white font-bold mb-3">Filter by Author</label>
              <select id="authorFilter" class="w-full px-4 py-3 bg-[var(--color-primary)] border border-[var(--color-text-secondary)] rounded-lg text-white focus:border-[var(--color-accent)] focus:outline-none transition-colors">
                <option value="">All Authors</option>
                {allAuthors.map((author: string) => (
                  <option value={author}>{author}</option>
                ))}
              </select>
            </div>

            <!-- Tag Filter -->
            <div class="mb-6">
              <label class="block text-white font-bold mb-3">Filter by Tag</label>
              <select id="tagFilter" class="w-full px-4 py-3 bg-[var(--color-primary)] border border-[var(--color-text-secondary)] rounded-lg text-white focus:border-[var(--color-accent)] focus:outline-none transition-colors">
                <option value="">All Tags</option>
                {allTags.map((tag: string) => (
                  <option value={tag}>{tag}</option>
                ))}
              </select>
            </div>

            <!-- Filter Actions -->
            <div class="space-y-4">
              <button id="clearFilters" class="w-full px-4 py-3 border border-[var(--color-accent)] text-[var(--color-accent)] rounded-lg hover:bg-[var(--color-accent)] hover:text-[var(--color-text-dark)] transition-all font-bold">
                Clear Filters
              </button>
              
              <div id="postCount" class="text-center text-[var(--color-text-secondary)] text-sm">
                Showing {sortedPosts.length} posts
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- No Posts Message -->
      <div id="noPosts" class="hidden text-center py-16">
        <div class="text-6xl mb-4">üîç</div>
        <h3 class="text-2xl font-bold text-white mb-4">No posts found</h3>
        <p class="text-[var(--color-text-secondary)] mb-8">Try adjusting your filters to see more posts.</p>
        <button id="resetFilters" class="px-6 py-3 bg-[var(--color-accent)] text-[var(--color-text-dark)] rounded-lg font-bold hover:bg-[var(--color-highlight)] transition-all">
          Reset Filters
        </button>
      </div>
    </div>
  </section>
</div>

<script>
  // Get all posts and filter elements
  const posts = document.querySelectorAll('a[href*="/blog/"]');
  const authorFilter = document.getElementById('authorFilter') as HTMLSelectElement;
  const tagFilter = document.getElementById('tagFilter') as HTMLSelectElement;
  const postCount = document.getElementById('postCount');
  const noPosts = document.getElementById('noPosts');
  const clearFilters = document.getElementById('clearFilters');
  const resetFilters = document.getElementById('resetFilters');

  function filterPosts() {
    if (!authorFilter || !tagFilter || !postCount || !noPosts) return;
    
    const selectedAuthor = authorFilter.value;
    const selectedTag = tagFilter.value;
    let visibleCount = 0;

    posts.forEach(post => {
      const article = post.querySelector('article');
      if (!article) return;
      
      const postAuthor = article.dataset.author;
      const postTags = article.dataset.tags?.split(',') || [];
      
      const authorMatch = !selectedAuthor || postAuthor === selectedAuthor;
      const tagMatch = !selectedTag || postTags.includes(selectedTag);
      
      if (authorMatch && tagMatch) {
        (post as HTMLElement).style.display = 'block';
        visibleCount++;
      } else {
        (post as HTMLElement).style.display = 'none';
      }
    });

    // Update post count
    postCount.textContent = `Showing ${visibleCount} posts`;
    
    // Show/hide no posts message
    if (visibleCount === 0) {
      noPosts.classList.remove('hidden');
    } else {
      noPosts.classList.add('hidden');
    }
  }

  // Add event listeners
  if (authorFilter) authorFilter.addEventListener('change', filterPosts);
  if (tagFilter) tagFilter.addEventListener('change', filterPosts);
  
  if (clearFilters) {
    clearFilters.addEventListener('click', () => {
      if (authorFilter) authorFilter.value = '';
      if (tagFilter) tagFilter.value = '';
      filterPosts();
    });
  }
  
  if (resetFilters) {
    resetFilters.addEventListener('click', () => {
      if (authorFilter) authorFilter.value = '';
      if (tagFilter) tagFilter.value = '';
      filterPosts();
    });
  }
</script>

<style>
  /* Ensure proper emoji rendering */
  .emoji {
    font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', 'Twemoji', sans-serif;
    font-variant-emoji: emoji;
    -webkit-font-feature-settings: "emoji";
    font-feature-settings: "emoji";
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
  }
  
  /* Ensure all text uses proper encoding */
  * {
    font-family: inherit;
  }
  
  /* Force UTF-8 rendering */
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
  }
  
  /* Responsive adjustments for mobile */
  @media (max-width: 1024px) {
    .lg\\:w-80 {
      width: 100%;
    }
    
    .lg\\:flex-row {
      flex-direction: column;
    }
  }
  
  /* Smooth transitions for filter panel */
  .sticky {
    transition: all 0.3s ease;
  }
</style>
